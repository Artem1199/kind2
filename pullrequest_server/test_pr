#!/bin/sh

#########################################################################
# This file is part of the Kind 2 model checker.                        #
#                                                                       #
# Copyright (c) 2014 by the Board of Trustees of the University of Iowa #
#                                                                       #
# Licensed under the Apache License, Version 2.0 (the "License"); you   #
# may not use this file except in compliance with the License.  You     #
# may obtain a copy of the License at                                   #
#                                                                       #
# http://www.apache.org/licenses/LICENSE-2.0                            #
#                                                                       #
# Unless required by applicable law or agreed to in writing, software   #
# distributed under the License is distributed on an "AS IS" BASIS,     #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       #
# implied. See the License for the specific language governing          #
# permissions and limitations under the License.                        #
#########################################################################

# This script is to be placed on the cvc cluster (in the $HOME of the calling
# user) and called by Kind 2 webserver (see jobserver/jobserver.eliom). It
# takes four arguments: ./test_pr <pull_request_id> <base_branch>
# <statuses_url> <pull_request_url>
#
# Tests will be queued on the SGE kind.q queue.
# html reports are exported in http://kind.cs.uiowa.edu/kind2_reports
#
# What's needed:
# - an api key in the file .github_token (only readable by owner)
# - benchmarks to run in ~/hook-benchmarks
# - necessary tools to get Kind 2 sources and compile (git, ocaml, camlp4,
#   menhir)
# - a fake pax binary (exit 1) in the calling user's path to prevent czmq
#   configure from stopping
# - TreeLimitedRun, run-benchmark.sh, benchmark-stat, scatterplot-stat binaries
#   in the user's ~/bin
# - the default solver used by Kind 2 in ~/bin
# - and ssh key in ~/.ssh/id_rsa_copy_report that is authorized to copy files in
#   the particular directory of the remote web server
#     (we use the prefix from="cvc.cs.uiowa.edu",no-port-forwarding,
#      no-X11-forwarding,no-agent-forwarding,no-pty,command="scp -r -t
#      /var/www/kind2_reports/" to only allow copies from cvc to the directory
#      /var/www/kind2_reports/ )


webserver_user="kind2"

# timeout set to 2 minutes for now
TIMEOUT="120"

# command line arguments
pr_nb=$1
base=$2
statuses_url=$3
pr_url=$4
clone_url=$5
sha=$6
base_sha=$7


# unique sha for the pull request's head
#sha=$(echo ${statuses_url##*/})
uniq="$sha$base_sha"

# everything will be run in $workdir
workdir="$HOME/sandbox/$uniq"
mkdir -p $workdir

# the variable $OK contains the status of the build/tests:
# - 0: everything ok so far
# - 1: test results differ from base
# - 2: found potential soundness bug
# - 4: build failed
OK=0

# append both stdout and stderr of this script to $log_file
log_file=$workdir/$uniq.log
echo "" > $log_file
exec >> $log_file
exec 2>&1

# directory containing benchmarks
benchmarks="$HOME/hook-benchmarks"

# file containing the github's api token (used for updating statuses)
token="$(cat .github_token)"


#==============================================================================

# update status on github

status_data=$(printf '{"state":"pending","description":"Fetching and compiling","context":"%s"}' "$base")

curl -H "Authorization: token $token" -H "Content-Type: application/json"\
     -X POST --data "$status_data" $statuses_url

#==============================================================================


# directory for checking out sources
kind_dir="$workdir/kind_test_pullrequests"
mkdir -p $kind_dir
cd $kind_dir


echo " * Cloning $clone_url"

git clone $clone_url .

echo " * Fetching pull request #$pr_nb"

# new local branch corresponding to the pull request
branch="pr$pr_nb"

git fetch origin refs/pull/$pr_nb/head:$branch

git checkout $branch

#==============================================================================

echo " * Building pull request #$pr_nb"

./autogen.sh

./build.sh

build_success=$?

echo "build_success=$build_succes"


#==============================================================================


echo " * Fetching $base"

# remove branch used for pull request
git checkout $base
git branch -D $branch


if [ "$build_success" != 0 ]; then
    OK=4
else

    cp bin/kind2 $workdir/kind2-$branch

    # get updates from bae branch
    git pull



    echo " * Building $base"

    make clean

    ./autogen.sh

    ./build.sh

    
    build_success=$?

    echo "build_success=$build_succes"

    if [ "$build_success" != 0 ]; then
        OK=4
    else

        # Builds successful
        
        cp bin/kind2 $workdir/kind2-$base

        # copying useful binaries

        cp $HOME/bin/z3 $workdir
        cp $HOME/bin/yices $workdir


        #==============================================================================



        echo " * Testing"



        mkdir -p $workdir/bench
        cp -R $benchmarks $workdir/bench

        resultdir_pr=$workdir/results-$branch
        resultdir_dev=$workdir/results-$base

        mkdir -p $resultdir_pr
        mkdir -p $resultdir_dev

        find $workdir/bench -iname "*.lus" > $workdir/benchs.jobs

        jobs=$(cat $workdir/benchs.jobs)

        cd $resultdir_pr

        # submit jobs to the queue
        JOBID_NEW=$(qsub-benchmark `basename $PWD` kind.q 8 $workdir/benchs.jobs $(($TIMEOUT + 5)) $workdir/kind2-$branch -v --color false --timeout_wall $TIMEOUT --z3_bin $workdir/z3 --yices_bin $workdir/yices | grep -oP '(?<=Your job-array\s)\w+')

        cd $resultdir_dev

        JOBID_DEV=$(qsub-benchmark `basename $PWD` kind.q 8 $workdir/benchs.jobs $(($TIMEOUT + 5)) $workdir/kind2-$base -v --color false --timeout_wall $TIMEOUT --z3_bin $workdir/z3 --yices_bin $workdir/yices | grep -oP '(?<=Your job-array\s)\w+')



        # update status on github

        status_data=$(printf '{"state":"pending","description":"Queuing tests","context":"%s"}' "$base")
        
        curl -H "Authorization: token $token" -H "Content-Type: application/json"\
             -X POST --data "$status_data" $statuses_url


        cd $workdir

        old_percentage=0
        percentage=0
        done_new=0
        done_dev=0
        nb_benchs=$(echo "$jobs" | wc -l)
        
        # wait for job arrays to finish
        while true; do

            sleep 1;

            # The folling report the progress to the pull request page in the
            # status info.  Github allows a maximum of 1000 api calls to a
            # given status url so we update the progress info only when it
            # increases (max 100 api calls here)
            

            # see if jobs are finished
            qs_new=$(qstat -j $JOBID_NEW)
            new_finished=$?
            qs_dev=$(qstat -j $JOBID_DEV)
            dev_finished=$?

            # get number of completed jobs for each job array (hackish using qstas output)
            tmp_done_new=$(echo "$qs_new" | grep "^usage" | tail -n 1 | awk '{print $2}' | sed -s 's/://g')
            tmp_done_dev=$(echo "$qs_dev" | grep "^usage" | tail -n 1 | awk '{print $2}' | sed -s 's/://g')
            
            if [ -z "$tmp_done_new" ]; then tmp_done_new=0; fi
            if [ -z "$tmp_done_dev" ]; then tmp_done_dev=0; fi

            if [ $tmp_done_new -gt $done_new ]; then done_new=$tmp_done_new; fi
            if [ $tmp_done_dev -gt $done_dev ]; then done_dev=$tmp_done_dev; fi        
            
            echo "done_new = $done_new"
            echo "done_dev = $done_dev"

            if [ $dev_finished != 0 ] && [ $new_finished != 0 ]; then
                break
            fi

            if [ $new_finished != 0 ]; then
                done_new=$nb_benchs
            fi

            if [ $dev_finished != 0 ]; then
                done_dev=$nb_benchs
            fi

            if [ $nb_benchs != 0 ]; then # just to prevent div by 0 otherwise everything crashes
                
                old_percentage=$percentage
                percentage=$(( ($done_new + $done_dev) * 100 / ($nb_benchs * 2) ))

                if [ $percentage != $old_percentage ]; then

                    progress_data=$(printf '{"state":"pending","description":"Running tests: %s %%","context":"%s"}' "$percentage"  "$base")

                    echo "send progress_data= $progress_data"

                    # update status on github
                    curl -H "Authorization: token $token" -H "Content-Type: application/json"\
                         -X POST --data "$progress_data" $statuses_url

                fi
            fi

        done

        #==============================================================================

        # At this point, all jobs are finished
        
        # update status on github
        status_data=$(printf '{"state":"pending","description":"Analyzing tests results","context":"%s"}' "$base")

        curl -H "Authorization: token $token" -H "Content-Type: application/json"\
             -X POST --data "$status_data" $statuses_url


        # Create scatterplot to compare performances
        
        benchmark-stat -o kind2-$branch.stat -p kind-2 $resultdir_pr
        benchmark-stat -o kind2-$base.stat -p kind-2 $resultdir_dev

        scatterplot-stat png kind2-$branch kind2-$base "Kind 2 PR #$pr_nb" "Kind 2 $base" $TIMEOUT

        image="$workdir/kind2-$branch-vs-kind2-$base.png"

        echo "Comparison with $base in $image"


        # Find disrepencies in results and change the value of $OK accordingly
        
        join $workdir/kind2-$branch.stat $workdir/kind2-$base.stat | grep -v ":" >  $workdir/results.stat

        failed="failed.txt"
        echo "" > $failed
        while read line; do
            name=$(echo $line | cut -d' ' -f 1)
            res_dev=$(echo $line | cut -d' ' -f 5)
            res_pr=$(echo $line | cut -d' ' -f 2)
            
            if [ "$res_dev" == "Valid" ] && [ "$res_pr" != "Valid" ] && [ "$res_pr" != "Timeout" ] ; then
                # echo -e "$res_dev \t $res_pr"
                echo "$name ($res_dev->$res_pr)">> $failed
                if [ "$OK" != "2" ]; then OK=1; fi
            fi;
            if [ "$res_dev" == "Invalid" ] && [ "$res_pr" != "Invalid" ] && [ "$res_pr" != "Timeout" ]; then
                # echo -e "$res_dev \t $res_pr"
                echo "$name ($res_dev->$res_pr)">> $failed
                if [ "$OK" != "2" ]; then OK=1; fi
                if [ "$res_pr" == "Valid" ]; then
                    echo "Soundness bug !!!"
                    OK=2
                fi
                
            fi;
        done  < $workdir/results.stat

    fi
    
fi


#==============================================================================

# status messages to send to github depending on the value of $OK

case $OK in
    0)
        state="success"
        description="Tests conform with $base"
        ;;
    1)
        state="failure"
        description="Tests do not conform with $base"
        ;;
    2)
        state="failure"
        description="Soundness error"
        ;;
    4)
        state="error"
        description="Build failed"
        ;;
    *)
        state="error"
        description="Some error occured during testing, see logs"
esac   



#==============================================================================

# Generate neat html report for the github status

echo "* Generate html report"

html_report="report.html"
echo "" > $html_report

echo '<!DOCTYPE html>' >> $html_report
echo '<html lang="en">' >> $html_report
echo '<head>' >> $html_report
echo "<title>Kind 2 report for pull-request #$pr_nb</title>" >> $html_report
echo '<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />' >> $html_report
echo '<meta name="viewport" content="width=device-width, initial-scale=1">' >> $html_report

# bootstrap stuffs
echo '<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>' >> $html_report
echo '</head>' >> $html_report

# script to show and hide results
echo -e     "<script type=\"text/javascript\">
	        function displayRow(){
                   var btn = document.getElementById(\"btn-togsame\");
                   if (btn.className == \"btn btn-default\") btn.className=\"btn btn-default active\";
                   else btn.className=\"btn btn-default\";
	           var rows = document.getElementsByName(\"tr_same\");
	           for(var i=0; i < rows.length; i++){
	             if (rows[i].style.display == '') rows[i].style.display = 'none';
	             else rows[i].style.display = '';
	           }
	        }
	     </script>"  >> $html_report



# actual report
echo '<body>' >> $html_report
echo '<div class="container">' >> $html_report

# title
echo '<div class="page-header">' >> $html_report
echo "<h1>Kind 2 report for pull-request <a href=\"$pr_url\">#$pr_nb</a>" >> $html_report
if [ $OK == 0 ]; then
    echo -e "<span class=\"label label-success\">Success</span>" >> $html_report
else
    echo -e "<span class=\"label label-danger\">Failure</span>" >> $html_report
fi
echo "<small>$(date)</small></h1>" >> $html_report
echo '</div>' >> $html_report


# status

case $OK in
    0)
        echo '<div class="alert alert-success" role="alert">' >> $html_report
        echo "<b>Success</b>: All tests conform to $base." >> $html_report
        ;;
    1)
        echo '<div class="alert alert-danger" role="alert">' >> $html_report
        echo "<b>Failure</b>: Tests do not conform to $base." >> $html_report
        ;;
    2)
        echo '<div class="alert alert-danger" role="alert">' >> $html_report
        echo '<b>Soundness bug</b>: Check logs and results below.' >> $html_report
        ;;
    4)
        echo '<div class="alert alert-danger" role="alert">' >> $html_report
        echo '<b>Build failure</b>: Check logs below.' >> $html_report
        ;;
    *)
        echo '<div class="alert alert-danger" role="alert">' >> $html_report
        echo '<b>Error</b>: Something bad happened. Check logs.' >> $html_report
esac   
echo '</div>' >> $html_report


echo

ex_resultdir_pr=$(basename $resultdir_pr)
ex_resultdir_dev=$(basename $resultdir_dev)
ex_image=$(basename $image)
ex_log_file=$(basename $log_file)


if [ "$OK" != "4" ]; then

    # perfs

    echo "<h2>Performance evolution</h2>" >> $html_report

    echo -e "<a href=\"$ex_image\"><img src=\"$ex_image\" alt=\"scatterplot\" class=\"img-responsive\" style=\"margin: 0 auto\"></a>" >>  $html_report



    # table results

    echo -e "<h2>Detailed test results <button id=\"btn-togsame\" type=\"button\" class=\"btn btn-default\" onclick=\"displayRow()\" >Show identical</button></p></h2>" >> $html_report

    echo '<table class="table table-striped">' >> $html_report

    # table headers
    echo "<tr>" >> $html_report
    echo "<th>Benchmark</th>" >> $html_report
    echo "<th colspan='2'>PR #$pr_nb</th>" >> $html_report
    echo "<th colspan='2'>$base</th>" >> $html_report
    echo "</tr>" >> $html_report

    tot_wc_pr=0
    tot_wc_dev=0

    while read line; do
        name=$(echo $line | cut -d' ' -f 1)
        res_pr=$(echo $line | cut -d' ' -f 2)
        wc_pr=$(echo $line | cut -d' ' -f 3)
        res_dev=$(echo $line | cut -d' ' -f 5)
        wc_dev=$(echo $line | cut -d' ' -f 6)

        tot_wc_pr=$(bc <<< "scale=2; $tot_wc_pr + $wc_pr")
        tot_wc_dev=$(bc <<< "scale=2; $tot_wc_dev + $wc_dev")
        
        if [ "$res_pr" == "$res_dev" ]; then
            echo '<tr name="tr_same" style="display:none">' >> $html_report
        else
            echo '<tr>' >> $html_report
        fi
        
        echo "<th>$name</th>" >> $html_report

        case $res_pr in
            "Valid")
                echo -e '<td class="alert-success">' >> $html_report
                echo -e "<a class='alert-success' href=\"$ex_resultdir_pr/$name\"><span class='glyphicon glyphicon-ok'> <b>Valid</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-success">' >> $html_report
                echo -e "$wc_pr s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            "Invalid")
                echo -e '<td class="alert-info">' >> $html_report
                echo -e "<a class='alert-info' href=\"$ex_resultdir_pr/$name\"><span class='glyphicon glyphicon-remove'> <b>Invalid</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-info">' >> $html_report
                echo -e "$wc_pr s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            "Timeout")
                echo -e '<td class="alert-warning">' >> $html_report
                echo -e "<a class='alert-warning' href=\"$ex_resultdir_pr/$name\"><span class='glyphicon glyphicon-time'> <b>Timeout</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-warning">' >> $html_report
                echo -e "$wc_pr s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            "Error")
                echo -e '<td class="alert-danger">' >> $html_report
                echo -e "<a class='alert-danger' href=\"$ex_resultdir_pr/$name\"><span class='glyphicon glyphicon-exclamation-sign'> <b>Error</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-danger">' >> $html_report
                echo -e "$wc_pr s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            *)
                echo -e '<td>' >> $html_report
                echo -e "<a class='alert-link' href=\"$ex_resultdir_pr/$name\"><span class='glyphicon glyphicon-exclamation-sign'> <b>Error</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td>' >> $html_report
                echo -e "$wc_pr s" >> $html_report
                echo -e '</td>' >> $html_report
        esac

        case $res_dev in
            "Valid")
                echo -e '<td class="alert-success">' >> $html_report
                echo -e "<a class='alert-success' href=\"$ex_resultdir_dev/$name\"><span class='glyphicon glyphicon-ok'> <b>Valid</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-success">' >> $html_report
                echo -e "$wc_dev s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            "Invalid")
                echo -e '<td class="alert-info">' >> $html_report
                echo -e "<a class='alert-info' href=\"$ex_resultdir_dev/$name\"><span class='glyphicon glyphicon-remove'> <b>Invalid</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-info">' >> $html_report
                echo -e "$wc_dev s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            "Timeout")
                echo -e '<td class="alert-warning">' >> $html_report
                echo -e "<a class='alert-warning' href=\"$ex_resultdir_dev/$name\"><span class='glyphicon glyphicon-time'> <b>Timeout</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-warning">' >> $html_report
                echo -e "$wc_dev s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            "Error")
                echo -e '<td class="alert-danger">' >> $html_report
                echo -e "<a class='alert-danger' href=\"$ex_resultdir_dev/$name\"><span class='glyphicon glyphicon-exclamation-sign'> <b>Error</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td class="alert-danger">' >> $html_report
                echo -e "$wc_dev s" >> $html_report
                echo -e '</td>' >> $html_report
                ;;
            *)
                echo -e '<td>' >> $html_report
                echo -e "<a class='alert-link' href=\"$ex_resultdir_dev/$name\"><span class='glyphicon glyphicon-exclamation-sign'> <b>Error</b></span></a>" >> $html_report
                echo -e '</td>' >> $html_report
                echo -e '<td>' >> $html_report
                echo -e "$wc_dev s" >> $html_report
                echo -e '</td>' >> $html_report
        esac
        

        echo '</tr>' >> $html_report

    done  < $workdir/results.stat

    echo "<tr>" >> $html_report
    echo "<th>Total</th>" >> $html_report
    echo "<th></th><th>$tot_wc_pr s</th>" >> $html_report
    echo "<th></th><th>$tot_wc_dev s</th>" >> $html_report
    echo "</tr>" >> $html_report

    echo '</table>' >> $html_report


fi



# Message log

echo "<h2>Message log</h2>" >> $html_report

echo '<pre class="pre-scrollable" style="max-height:600px">' >> $html_report
cat $log_file >> $html_report
echo '</pre>' >> $html_report



echo '</div>' >> $html_report
echo '</body>' >> $html_report
echo '</html>' >> $html_report



# create dir for report export
export_dir=$uniq
mkdir -p $export_dir/
mv $image $export_dir/
mv $html_report $export_dir/index.html
mv $resultdir_pr $export_dir/
mv $resultdir_dev $export_dir/


# copy report to remote web server
scp -r -i ~/.ssh/id_rsa_copy_report $export_dir $webserver_user@kind.cs.uiowa.edu:.

report_url="http://kind.cs.uiowa.edu/kind2_reports/$export_dir"



#==============================================================================

# Send final status update to github

status_data=$(printf '{"state":"%s","description":"%s","target_url":"%s","context":"%s"}' "$state" "$description" "$report_url" "$base")

echo "send status_data= $status_data"

# update status on github
curl -H "Authorization: token $token" -H "Content-Type: application/json"\
     -X POST --data "$status_data" $statuses_url


# clean everything
cd
rm -rf "$workdir" 

exit 0
